

upstream {{nginx_instance_name}} {
    server localhost:{{port}};
}




{% if redirect_to_ssl %}

server {
    listen 80;
    server_name {{domain}} {{alias_domains_str}} {{redirect_domains_str}};

    location /.well-known {
       try_files $uri $uri/ =404;
       alias /var/www/html/.well-known;
       index index.html index.htm;
       allow all;
    }

    return 301 https://$host$request_uri;
}

{% else %}


server {
    listen 80;
    server_name {{domain}} {{alias_domains_str}};
    location / {
        proxy_pass http://{{nginx_instance_name}};
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Upstream-Forwarded-Proto $http_x_forwarded_proto;
        proxy_read_timeout {{nginx_proxy_read_timeout}};
        client_max_body_size {{nginx_client_max_body_size}};

    }

    location ~ /st-wsroot/ {
       proxy_pass http://localhost:{{ port }};
       proxy_http_version 1.1;
       proxy_connect_timeout 20s;
       proxy_send_timeout 1h;
       proxy_read_timeout 1h;            
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "upgrade";
    }


    location /.well-known {
       try_files $uri $uri/ =404;
       alias /var/www/html/.well-known;
       index index.html index.htm;
       allow all;
    }
}

{% if redirect_domains_str %}
server {
    listen 80;
    server_name {{redirect_domains_str}};

    location /.well-known {
       try_files $uri $uri/ =404;
       alias /var/www/html/.well-known;
       index index.html index.htm;
       allow all;
    }
    return 301 $scheme://{{domain}}$request_uri;
}
{% endif %}

{% endif %}




{% if ssl_enabled %}

server {
    listen 443;
    server_name {{domain}} {{alias_domains_str}};
    ssl on;
    ssl_certificate {{ssl_cert_chain}};
    ssl_certificate_key {{ssl_private_key}};
    #enables all versions of TLS, but not SSLv2 or 3 which are weak and now deprecated.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    #Disables all weak ciphers
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    ssl_prefer_server_ciphers on;

    location /.well-known {
       try_files $uri $uri/ =404;
       alias /var/www/html/.well-known;
       index index.html index.htm;
       allow all;
    }

    location ~ /st-wsroot/ {
       proxy_pass http://localhost:{{ port }};
       proxy_http_version 1.1;
       proxy_connect_timeout 20s;
       proxy_send_timeout 1h;
       proxy_read_timeout 1h;            
       proxy_set_header Upgrade $http_upgrade;
       proxy_set_header Connection "upgrade";
    }


    location / {
        proxy_pass http://{{nginx_instance_name}};
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout {{nginx_proxy_read_timeout}};
        client_max_body_size {{nginx_client_max_body_size}};
    }
}

{% if redirect_domains_str %}
server {
    listen 443;
    server_name {{redirect_domains_str}};
    ssl on;
    ssl_certificate {{ssl_cert_chain}};
    ssl_certificate_key {{ssl_private_key}};
    #enables all versions of TLS, but not SSLv2 or 3 which are weak and now deprecated.
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    #Disables all weak ciphers
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    ssl_prefer_server_ciphers on;

    location /.well-known {
       try_files $uri $uri/ =404;
       alias /var/www/html/.well-known;
       index index.html index.htm;
       allow all;
    }
    return 301 $scheme://{{domain}}$request_uri;

}
{% endif %}


{% endif %}

